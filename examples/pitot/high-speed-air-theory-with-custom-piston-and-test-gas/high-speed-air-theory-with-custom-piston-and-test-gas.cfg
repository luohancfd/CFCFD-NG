# Example input file for pitot.
# Chris James (c.james4@uq.edu.au) 14/01/14
# This is a new test of a high enthalpy air condition.
# Uses a custom piston version of X2's piston (instead of the usual hardwired condition).
# This also is a basic air condition, but it uses a custom test gas instead of the usual
# test gas selection.
# (Umar's 11.3 km/s air condition).
# I've tried to annotate this config file as much as I can so it will
# be useful to other people using the program.

#--------------------------- Start-up --------------------------------------
# This is where the setup of the program is specified.

# Name of the output file (if required)
filename = 'high-speed-air-theory-with-custom-piston-and-test-gas'

# Boolean statement controlling if pitot will clean up temporary files after running
# Use false unless you really want to clean everything up.

cleanup = False 

# Testcase to run. There are three options:
# 'fulltheory-pressure' = a fully theoretical run where shock speeds are found from set fill pressures
# 'fulltheory-shock' = a fully theoretical run where fill pressures are found from set shock speeds 
# 'experiment' = partially theoretical run where both shock speeds and fill pressures are specified based on experimental data

test = 'fulltheory-pressure'

# Solver to use. There are three options:
# 'eq' = equilibrium calculations using CEA code
# 'pg' = perfect gas solver
# "pg-eq' = a combination of pg and eq solvers, used for CO2 based gases. Sets state1 as a pg, but everything else (including the shock to state 2, are done as eq)

solver = 'eq'

# Mode that the program is run in. There are five options:
# 'printout' = normal run, prints out a summary to the screen, a txt file and a csv file at the end of the program, then quits
# 'return' = simpler run, useful if pitot is to be used inside a bigger program. returns a set of values at the end of the run, then quits
# the returned values are cfg, states, V and M, which are, the config dictionary, state dictionary, velocity dictionary and mach number dictionary
# 'cea-printout' = same as printout but does some cfcfd gas object printouts at the end
# 'txt-printout' = just does the txt file printout
# 'cea-txt-printout' = just the txt file printout but with cea style printouts too
# 'csv-printout' = just does the csv printout

mode = 'printout'

# Here you can specify how many steps are used for the various unsteady expansions

#secondary_driver_expansion_steps = 200

shock_tube_expansion_steps = 200

# need to use 800 - 1000 steps on the acceleration tube unsteady expansion to match the
# pressure across the contact surface properly, which is important.

acc_tube_expansion_steps = 800

# Can specify your own bounds and initial guesses for the secant solver in 
# the acceleration tube if you so desire

# for 'fulltheory-pressure' testcase:

#Vs2_lower = 
#Vs2_upper =
#Vs2_guess_1 =
#Vs2_guess_2 = 

# for 'fulltheory-shock' testcase: (all pressures in Pa)

#p5_lower = 5.0
#p5_upper = 2000.0
#p5_guess_1 = 10.0
#p5_guess_2 = 100.0

#------------------------- Facility parameters -----------------------------
# This is where the facility parameters are specified.

# The facility to simulate. Currently there are three options:
# 'x2' = the x2 expansion tube
# 'x3' = the x3 expansion tube
# 'custom' = a custom facility where the driver configuration must be specified with a heap of variables.
# (See below)

facility = 'custom'

# Tunnel mode to use. There are two options:
# 'expansion-tube' = expansion tube mode
# 'nr-shock-tunnel' = non-reflected shock tunnel mode

tunnel_mode = 'expansion-tube'

# Secondary driver 

secondary = False

# Nozzle

nozzle = True

# Piston in use (Only currently required for x2 facility). There are two options:
# 'lwp' = lightweight piston. tuned driver condition designed by David Gildfind
# 'ostp' = original single stage piston. designed by Michael Scott

piston = 'lwp'

#-------------------------- Tunnel parameters ------------------------------

# Custom driver gas details

driver_p = 92800.0 #driver fill pressure, Pa
driver_T = 298.0 #driver temperature, K

driver_composition = {'He':1.0} #driver composition. Must be a valid Python dictionary.
driver_inputUnits = 'moles' #input units for custom driver. either 'moles' or 'massf'
test_gas_with_ions= True #whether to use ions with the test gas.

p4 = 27.9e6 #primary driver burst pressure, Pa 
# another variable 'compression_ratio' can also be used here to instead specify a compression ratio
# instead of a final pressure

# Mach number at change between steady expansion from stagnation and unsteady expansion
# This variable is important as it will affect the solution greatly, good idea to 
# ask myself or RGM about this one if you're unsure.
M_throat = 2.15 

# Test gas to use (by mole fraction where mentioned). There are myriad options:
# Check the make_test_gas function in the main program for more info about the gases
# 'air'; 'air5species'; 'n2'; 'titan'; 'gasgiant_h215ne'; 'gasgiant_h215he'; 
# 'gasgiant_h240ne'; 'gasgiant_h285ne'; 'gasgiant_h210he'; 'gasgiant_h210ne'; 
# 'co2'; 'mars'; 'venus'; 'h2'
# Can also select test_gas as 'custom'. This then requires test_gas_composition, test_gas_inputUnits to be set.
# NOTE: co2, mars and venus test gases only work with pg and pg-eq solvers

test_gas = 'custom'

# Below are extra variables that are only used when a custom test gas is in use.

test_gas_composition = {'Air':1.0} #test gas composition. Must be a valid Python dictionary.
test_gas_inputUnits = 'moles' #input units for the custom test gas. either 'moles' or 'massf'

# Specified shock speeds (used for both the 'fulltheory-shock' and 'experiment' test cases)
# Units for shock speeds are m/s and should be inputted as floating point numbers
# Vsd, Vs1 and Vs2 are the names of the variables

# Specified fill pressures (used for both the 'fulltheory-pressure' and 'experiment' test cases)
# Units for fill pressures are Pa and should be inputted as floating point numbers
# psd, p1 and p5 are the names of the variables
# psd is secondary driver fill pressure (if used)
# p1 is shock tube fill pressure
# p5 is acceleration tube fill pressure (if used)

p1 = 3000.0 # Pa
p5 = 10.0 # Pa

#-------------------------- Final parameters ------------------------------
# Some parameters that control the solution

# Nozzle area ratio
# I used to generally use 2.5 (which was a value from Richard)
# BUT currently I've been using 5.64 (the geometric area ratio of the nozzle)

area_ratio = 5.64

# Choose whether to expand expanding shocked test gas to the shock speed or 
# the gas velocity behind the shock in the acceleration tube.
# 'flow-behind-shock' = expand shocked test gas to gas velocity behind shock in the acceleration tube
# 'shock-speed' = expand the shocked test gas to the shock speed in the acceleration tube
# I changed the default here to 'shock-speed' as that simulates the Mirels' Effect
# and would generally be correct for most high enthalpy test cases.

expand_to = 'shock-speed'

# Change the ratio of the expansion specified in the parameter above.
# Leave this value as a floating point 1.0 unless you know what you're doing,
# but it's used to tweak how far above or below the shock speed / gas velocity 
# that the test gas is expanded to.

#expansion_factor = 1.0

# Turns on the shock switch that is used for simulating scramjet conditions.
# In a scramjet condition in an expansion tube the secondary driver shock is
# driven faster than the shock in the test gas, creating a normal shock into 
# the shock tube, instead of the usual unsteady expansion. The switch below turns
# that feature on (the code will try to look for the phenomena itself, 
# but it won't always find it).
# NOTE: always make this false unless you know what it is!

shock_switch = False

# Turns on the code that calculates the conditions over a conehead placed in the test section.
# The conehead angle can be specified in degrees, but will default to 15 degrees if not specified.

conehead = True
conehead_angle = 15.0 # (degrees)


# Turns on the code that calculates the conditions over a normal shock over a test model in the test section.

shock_over_model = True



