#! /bin/sh
# run_and_plot_piston_sim.sh
# Sample script to exercise L1d on an ideal piston simulation.
#
# It is assumed that the L1d programs are correctly compiled and
# installed in a directory that is in the search path.
# Also, it is assumed that GNU-Plot is available as "gnuplot".
#----------------------------------------------------------------

# Starting with the user's script piston.py,
# generate the input parameter file, piston.Lp, then 
# generate a starting solution file (piston.L0) and 
# tube description (area) file (piston.La).

l_script.py -f piston
l_prep.exe -f piston

# The simulation can now start at the initial (t=0) solution
# and integrate the gas-dynamic (and piston-dynamic) equations
# in time.
# The output files from this stage include:
# piston.Ls  : the solution data for t>0
# piston.hx  : history data for specific locations
# piston.hc  : history data for specific (Lagrangian) gas cells
#
# Console output is captured in the file piston.log which
# may be viewed during the simulation with the unix command tail -f.
#
# The Unix time command may be used to measure the CPU time required
# for the simulation.  The output from the time command seems to go
# to stderr and so is not caught in in the file piston.log.

echo 
echo Beginning simulation...
echo Console output is being caught in file piston.log.
time l1d.exe -f piston > piston.log
echo Finished simulation.
echo 

# At this point, the simulation is complete and the post-processing
# programs can be used to reformat the data for plotting.
#
# For example:
# (1) A space-time plot can be generated via a 
#     contour plotting package.
#     First, extract the pressure (on a logarithmic scale) and 
#     save it in a file (piston_log_p.gen) suitable for 
#     the Generic contour  plotter.
#     Then contour variable 2 (0 is x, 1 is time) to get 
#     the X-T diagram.

sptime.exe -f piston -tstop 50.0e-3 -p -log
mb_cont.exe -fi piston_log_p.gen -fo piston_log_p.ps -ps \
            -var 2 -edge -notrueshape -xrange -4.0 8.0 2.0 \
            -yrange 0.0 50.0e-3 10.0e-3

# (2) Piston data may be extracted and plotted.
#     Here, the plots will be generated by GNU-Plot
#     as encapsulated postscript file.
#     Use Ghostscript to view them, or print them.
#     The ideal data has been generated by the script piston.tcl
#     and previously saved in file ideal.dat

piston.exe -f piston -tstop 50.0e-3

# Generate the ideal solution with the Tcl script.
tclsh piston.tcl

gnuplot <<EOF 
set term postscript eps 20
set output "position.eps"
set title "Ideal Piston Simulation: Position vs Time"
set xlabel "x, m"
set ylabel "t, s"
set xrange [0:7]
set yrange [0:60.0e-3]
set key bottom right
plot "piston_p0.dat" using 2:1 title "L1d solution" with lines, \
     "ideal.dat" using 2:1 title "Ideal" with points
EOF

gnuplot <<EOF
set term postscript eps 20
set output "velocity.eps"
set title "Ideal Piston Simulation: Speed vs Position"
set xlabel "x, m"
set ylabel "V, m/s"
set xrange [0:7]
set yrange [0:250.0]
set key bottom right
plot "piston_p0.dat" using 2:3 title "L1d solution" with lines, \
     "ideal.dat" using 2:3 title "Ideal" with points
EOF

# (3) Flow history at a specified location can be extracted from
#     the history file piston.hx and plotted with GNU-Plot.
#     Since one history location was specified in the parameter file,
#     the only available history location has an index of 0 and its
#     data will be written to the file piston_hx0.dat.

l_hist.exe -f piston -tstart 1.0e-3 -tstop 50.0e-3 -xloc 0
l_hist.exe -f piston -tstop 50.0e-3 -cell 0

gnuplot <<EOF
set term postscript eps 20
set output "pressure.eps"
set title "Ideal Piston Simulation: Pressure at End-Wall and Piston"
set xlabel "t, s"
set ylabel "p, Pa"
set xrange [0:50.0e-3]
set xtic 0.010
set yrange [0:120.0e3]
set key top right
plot "piston_hx0.dat" using 1:6 title "End wall" with lines linestyle 1, \
     "piston_hc0.dat" using 1:6 title "Piston face" with lines linestyle 2
EOF

