                    Addenda to CVODE User Guide
                         Alan C. Hindmarsh
                           27 March 2000


Since the initial release of CVODE in 1994, a number of modifications
have been made to the CVODE package.  The following list summarizes
these modifications and their impact on the usage of CVODE.

1. In order to avoid name conflicts when CVODE is installed in
certain PC environments, the file llnltyps.h has been modified.  
The constant name
   FLOAT      has been changed to  LLNL_FLOAT, 
   DOUBLE     has been changed to  LLNL_DOUBLE, 
   INT        has been changed to  LLNL_INT,    and 
   LONG_INT   has been changed to  LLNL_LONG.
With this modification, the instructions in the CVODE User Guide,
Chapter 7, on changing types real and integer are affected.  The macro
definitions given there involving the names FLOAT, DOUBLE, INT, and
LONG_INT must instead use the above new names.

2. The boolean data type "bool" defined in file llnltyps.h has been
changed to "boole" in order to avoid a conflict with the C++ type bool.  
Besides affecting various solver files that use this type, this name
change also affects the example programs cvkx.c, cvdemd.c, and
cvdemk.c that use a boolean variable.

3. The name of the VECTOR module (files vector.h, vector.c) has been
changed to NVECTOR (files nvector.h, nvector.c) to avoid a possible
conflict with user-defined files with these names.  This change
affects all user programs, which must include the nvector.h file.
   In addition, several kernels have been added to the NVECTOR module,
as needed to support related solvers written at LLNL for nonlinear
systems and differential-algebraic systems.  However, this addition
has no affect on users of CVODE.

4. Wrappers have been added to all header files to permit CVODE to be
used in a C++ application.  The wrapper has the form:
   #ifdef __cplusplus
   extern "C" {
   #endif
   ...
   #ifdef __cplusplus
   }
   #endif
and causes the C++ compiler to use C-style names when compiling the
function prototypes in CVODE.  Users with C programs are not affected.

5. In the file llnlmath.h, the definitions of MIN, MAX, ABS, and SQR
have been surrounded by #ifndef/#endif lines to avoid compilation
errors on some systems.

6. The generic SPGMR module, for the scaled preconditioned GMRES
method, has been modified (in files spgmr.h, spgmr.c) to correct the
names and descriptions of the scaling vectors (input arguments).
This has no effect on CVODE users, but is important if this module is
extracted for use separately to solve linear systems.

7. A new user-callable routine, CVReInit, has been added (in files
cvode.h and cvode.c).  This routine is for re-initialization of CVODE.
It is to be called if CVodeMalloc has been called previously for a
given problem, and another problem of the same size is to be solved
with CVODE.  CVReInit performs essentially the same initializations
and error checking as CVodeMalloc, but does no memory allocations, as
the existing CVODE memory can be reused in this situation.  The use of
CVReInit is illustrated in the demo programs cvdemd.c and cvdemk.c.

8. A number of minor internal corrections and improvements have been
made throughout the CVODE package.  These are not listed here, as they
do not affect the usage of the package.

9. A new module, CVBANDPRE (files cvbandpre.h and cvbandpre.c), has
been added.  This provides a banded preconditioner for use with the
CVSPGMR module.  It generates a banded approximation to the Jacobian,
with user-defined bandwidth parameters, using difference quotients.
From that it builds and solves a banded preconditioner matrix.  
See cvbandpre.h for usage details.

10. In addition to the CVODE User Guide and this Addenda, documentation
for CVODE also appears in the following article:
  S. D. Cohen and A. C. Hindmarsh, "CVODE, A Stiff/Nonstiff ODE
  Solver in C," Computers in Physics, Vol. 10, No. 2 (March-April 1996),
  pp. 138-143; also available as LLNL Technical Report UCRL-JC-121014,
  Rev. 1, Lawrence Livermore National Laboratory, August 1995.
