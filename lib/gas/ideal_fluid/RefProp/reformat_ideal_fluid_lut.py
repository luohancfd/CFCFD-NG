#! /usr/bin/env python
# reformat_ideal_fluid_lut.py
# PJ, July 2010

import sys, os, math
import numpy as N
from gzip import GzipFile
var_list = ['rho', 'e', 'p', 'h', 's', 'T', 'Cp', 'Cv',
            'gamma', 'a', 'mu', 'k', 'quality']

def print_usage():
    print "Usage: ./reformat_ideal_fluid_lut.py <job_name> <task>"
    print "    Picks up text table output by RefProp and does <task>."
    print "    where <task> is one of"
    print "       do_plots"
    print "       do_lua_file"
    print "       do_sample <p> <T>"
    print "    The RefProp table is assumed to be in file job_name.txt"
    print "    The Lua output file will be job_name.lua.gz"
    return

def read_text_lut(file_name):
    """
    Read the file exported from RefProp.
    """
    global var_list
    #
    fp = open(file_name, "r")
    line_list = fp.readlines()
    print "Contains variables:"
    var_count = 0
    for var in line_list[0].strip().split(','):
        var = var.strip()
        if len(var) > 0:
            print "   ", var_count, var
            var_count += 1
    #
    del line_list[0]
    data = {}
    for var in var_list: data[var] = []
    data_count = 0
    density_count = 0
    energy_count = 0
    found_new_density = True
    old_rho = 0.0
    for line in line_list:
        line = line.strip()
        if len(line) == 0: break
        items = line.split(',')
        if data_count == 0: data['fluid_name'] = items[0]
        rho = float(items[1])          # density, kg/m^3
        e = float(items[2])            # internal energy, J/kg
        p = float(items[3]) * 1000.0   # pressure,Pa
        h = float(items[4])            # enthalpy, J/kg
        s = float(items[5])            # entropy, K/kg.K
        T = float(items[6])            # temperature, K
        Cp = float(items[7])           # specific heat, J/kg.K
        Cv = float(items[8])           # specific heat, J/kg.K
        gamma = float(items[9])        # ratio of specific heats
        a = float(items[10])           # sound speed, m/s
        mu = float(items[11])          # dynamic viscosity, Pa.s
        k = float(items[12])           # thermal conductivity, W/m.K
        quality = float(items[13])     # quality
        new_data = {'rho':rho, 'e':e, 'p':p, 'h':h, 's':s, 'T':T,
                    'Cp':Cp, 'Cv':Cv, 'gamma':gamma, 'a':a,
                    'mu':mu, 'k':k, 'quality':quality}
        data_count += 1
        if data_count > 1: found_new_density = (abs(rho - old_rho)/rho) > 1.0e-3
        if found_new_density:
            density_count += 1
            energy_count = 0
            for var in var_list: data[var].append([])
        for var in var_list: data[var][-1].append(new_data[var])
        energy_count += 1
        # print "density_count=", density_count, "energy_count=", energy_count
        old_rho = rho
    # Put the data into numpy arrays with elements[i,:] having constant density[i]
    # and elements[:,i] having constant internal energy[i]. 
    for var in var_list: data[var] = N.array(data[var])
    data['log10rho'] = N.log10(data['rho'])
    var_list.append('log10rho')
    data['log10p'] = N.log10(data['p'])
    var_list.append('log10p')
    print "data_count=", data_count
    print "density_count*energy_count=", density_count*energy_count
    return data


def write_lua_lut_file(file_name):
    """
    Writes the look-up file in Lua, ready for the CFD gas model code.
    """
    print "\nCompute average density step."
    diff_log10rho = data['log10rho'][1:,0] - data['log10rho'][0:-1,0]
    print 'diff_log10rho=', diff_log10rho
    irsteps = len(diff_log10rho)
    dlog10rho = sum(diff_log10rho)/len(diff_log10rho)
    log10rho_min = data['log10rho'][0,0]
    print 'dlog10rho=', dlog10rho, 'irsteps=', irsteps, 'log10rho_min=', log10rho_min

    print "Compute average energy step."
    diff_e = data['e'][0,1:] - data['e'][0,0:-1]
    print 'diff_e=', diff_e
    iesteps = len(diff_e)
    de = sum(diff_e)/iesteps
    e_min = data['e'][0,0]
    print 'de=', de, 'iesteps=', iesteps, 'e_min=', e_min

    print "\nWrite Lua table."
    fp = GzipFile(file_name, "wb")
    fp.write("-- Generated by reformatting a RefProp Export file for fluid ")
    fp.write(data['fluid_name']+"\n")
    fp.write("model = 'look-up table'\n")
    fp.write("iesteps = %d\n" % iesteps)
    fp.write("irsteps = %d\n" % irsteps)
    fp.write("emin = %g\n" % e_min)
    fp.write("de = %g\n" % de)
    fp.write("lrmin = %g\n" % log10rho_min)
    fp.write("dlr = %g\n" % dlog10rho)
    fp.write("data = {\n")
    for ie in range(iesteps+1):
        fp.write("{\n")
        for ir in range(irsteps+1):
            T = data['T'][ir][ie]
            e = data['e'][ir][ie]
            Cv_hat = e/T
            Cv = data['Cv'][ir][ie]
            p = data['p'][ir][ie]
            rho = data['rho'][ir][ie]
            R_hat = p/(rho*T)
            a = data['a'][ir][ie]
            gamma_hat = a*a/(R_hat*T)
            mu_hat = data['mu'][ir][ie]
            k_hat = data['k'][ir][ie]
            fp.write("{%g, %g, %g, %g, %g, %g},\n" % 
                     (Cv_hat, Cv, R_hat, gamma_hat, mu_hat, k_hat))
        fp.write("},\n")
    fp.write("}\n")
    fp.close()
    return


def pT_error(p, T, p2, T2):
    """
    Least-squares error between the two points.
    """
    rel_err_p = (p - p2)/p; rel_err_T = (T - T2)/T
    err = rel_err_p * rel_err_p + rel_err_T * rel_err_T
    return err

def find_nearest(data, p, T):
    """
    Find the nearest RefProp data point and return the fluid properties there.
    """
    nr,ne = data['e'].shape
    print "nr=", nr, "ne=", ne
    min_ir = 0; min_ie = 0; 
    min_err = pT_error(p, T, data['p'][min_ir,min_ie], data['T'][min_ir,min_ie])
    for ir in range(nr):
        for ie in range(ne):
            err = pT_error(p, T, data['p'][ir,ie], data['T'][ir,ie])
            if err < min_err: min_err = err; min_ir = ir; min_ie = ie
    return min_ir, min_ie


#----------------------------------------------------------------
print "reformat_ideal_fluid_lut.py: Begin..."
if len(sys.argv) < 2:
    print_usage()
    sys.exit()

job_name = sys.argv[1]
task = sys.argv[2]
do_plots = task == 'do_plots'
do_lua_file = task == 'do_lua_file'
do_sample = task == 'do_sample'

in_file_name = job_name + ".txt"
print "Reading RefProp export file ", in_file_name
data = read_text_lut(in_file_name)

if do_plots:
    import matplotlib.pyplot as plt
    plot_var_list = ['log10p', 'T', 'a', 'gamma', 'quality', 'Cp', 'Cv', 'h', 's']
    for plot_var in plot_var_list:
        plt.figure()
        CS = plt.contour(data['log10rho'], data['e'], data[plot_var])
        plt.clabel(CS, inline=1, fontsize=10)
        plt.title(job_name + ' '+ plot_var)
        plt.xlabel('log10(density)')
        plt.ylabel('internal energy')
    #
    plt.figure()
    CS = plt.contour(data['log10rho'], data['e'], data['gamma'], 
                     N.arange(1.0,2.0,0.01))
    plt.clabel(CS, inline=1, fontsize=10)
    plt.title(job_name + ' '+ 'gamma')
    plt.xlabel('log10(density)')
    plt.ylabel('internal energy')
    #
    plt.show()

if do_lua_file:
    write_lua_lut_file(job_name + ".lua.gz")


if do_sample:
    p = float(sys.argv[3])
    T = float(sys.argv[4])
    ir, ie = find_nearest(data, p, T)
    print "RefProp data at point p=", p, "T=", T
    print "   ir=", ir, "ie=", ie, "err=", pT_error(p, T, data['p'][ir,ie], data['T'][ir,ie])
    for var in var_list:
        print "   %s: %g" % (var, data[var][ir][ie])

print "Done."
