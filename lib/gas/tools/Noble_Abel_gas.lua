-- Author: Rowan J. Gollan
-- Date: 20-May-2009
-- Place: Poquoson, Virginia, USA

module(..., package.seeall)

-----
-- Adapted from Listing 12.2 in
-- Programming in Lua, 2nd edition
-----
function serialise(o, f, indent)
   indent = indent or ""
   if type(o) == "number" then
      f:write(o)
   elseif type(o) == "string" then
      f:write(string.format("%q", o))
   elseif type(o) == "table" then
      local old_indent = indent
      indent = indent.."  "
      f:write("{\n")
      for k,v in pairs(o) do
	 if type(k) == "string" then
	    f:write(string.format("%s%s = ", indent, k))
	 else
	    f:write(string.format("%s", indent))
	 end
	 serialise(v, f, indent)
	 f:write(",\n")
      end
      indent = old_indent
      f:write(string.format("%s}", indent))
   else
      error("cannot serialise a " .. type(o))
   end
end

function list_available_species()
   e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
   dir = e3bin.."/species"
   tmpname = os.tmpname()
   os.execute(string.format("ls -1 %s/*.lua > %s", dir, tmpname))
   tmpfile = assert(io.open(tmpname, "r"))
   species = {}
   for line in tmpfile:lines() do
      sp = string.match(line, "([%a%d_]+).lua")
      species[sp] = true
   end
   tmpfile:close()
   os.execute(string.format("rm %s", tmpname))
   return species
end

local value_list = {"M",
		    "gamma",
		    "d",
		    "T_c",
		    "p_c"}

local model_list = {"viscosity",
		    "thermal_conductivity"}

function create_Noble_Abel_gas(species, f)
   species_avail = list_available_species()
   
   f:write(string.format("-- Auto-generated by gasfile on: %s\n",
			 os.date("%d-%b-%Y %X")))
   f:write("model = 'composite gas'\n")
   f:write("equation_of_state = 'Noble-Abel gas'\n")
   f:write("thermal_behaviour = 'thermally real'\n")
   f:write("mixing_rule = 'Wilke'\n")
   f:write("sound_speed = 'equilibrium'\n")
   if #species > 1 then
      f:write("diffusion_coefficients = 'hard sphere'\n")
   end
   f:write("ignore_mole_fraction = 1.0e-15\n")
   if _G.T_COLD then
      f:write(string.format("T_COLD = %f\n", _G.T_COLD))
   else
      f:write("T_COLD = 20.0\n")
   end

   f:write("species = {")
   for _,sp in ipairs(species) do
      if not species_avail[sp] then
	 print(string.format("Species: %s cannot be found in the collection of species.\n", sp))
	 print("Check for an appropriate file in:\n")
	 e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
	 dir = e3bin.."/species"
	 print("   ", dir)
	 print("Bailing out!\n")
	 os.exit(1)
      end
      f:write(string.format("'%s', ", sp))
   end
   f:write("}\n")
   f:write("\n")
   
   e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
   dir = e3bin.."/species"
   default_file = dir.."/defaults.lua"
   dofile(default_file)

   for _,sp in ipairs(species) do
      e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
      dir = e3bin.."/species/"
      file = dir..sp..".lua"
      dofile(file)
      
      f:write(string.format("%s = {}\n", sp))

      for __,val in ipairs(value_list) do
	 var = sp.."."..val
	 f:write(string.format("%s = ", var))
	 if _G[sp][val] then
	    serialise(_G[sp][val], f)
	 else
	    serialise(default[val], f)
	 end
	 f:write("\n")
      end

      for __,model in ipairs(model_list) do
	 var = sp.."."..model
	 f:write(string.format("%s = ", var))
	 if _G[sp][model] then
	    serialise(_G[sp][model], f)
	 else
	    serialise(default[model], f)
	 end
	 f:write("\n")
      end

      var = sp..".CEA_coeffs"
      f:write(string.format("%s = ", var))
      serialise(_G[sp].CEA_coeffs, f)
      f:write("\n")
   end
end
