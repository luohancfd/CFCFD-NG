#! /usr/bin/env python
"""
build-REFPROP-lut.py

Build look-up-table for the behaviour of a real gas or real gas mixture.
All of the difficult computation is done by the NIST REFPROP program.
We just collate the results in a form convenient for the gas module of Eilmer3.

.. Authors: Peter Blyton
.. Version: 15-June-2012
"""

import sys, os, time, numpy, math, gzip
sys.path.append(os.path.expandvars("$HOME/e3bin"))
from gaspy import *

def get_e_range(myFluid, fluidModel, T_min, T_max, log_rho_values):
    """
    Scan the boundary of the temperature and density to determine 
    the range of internal that can be comfortably computed by REFPROP.
    """
    e_values = []
    for log_rho in log_rho_values:
        myFluid.T[0] = T_min
        myFluid.rho = math.pow(10.0, log_rho)
        fluidModel.eval_thermo_state_rhoT(myFluid)
        e_values.append(myFluid.e[0])
    e_min = max(e_values)
    e_values = []
    for log_rho in log_rho_values:
        myFluid.T[0] = T_max
        myFluid.rho = math.pow(10.0, log_rho)
        fluidModel.eval_thermo_state_rhoT(myFluid)
        e_values.append(myFluid.e[0])
    e_max = min(e_values)
    return e_min, e_max

def build_table(fluidName, T_min, T_max,
                log_rho_min, log_rho_max,
                iesteps, irsteps):
    """
    Compute gas thermo properties for a mesh of internal-energy and density values
    and write an encoded form of the thermo data to a Lua-format file.

    :param fluidName: the REFPROP fluid name
    :param T_min: in degrees K
    :param T_max: in degrees K
    :param log_rho_min: log-base-10 of minimum density in kg/m**3
    :param log_rho_max: log-base-10 of maximum density in kg/m**3
    :param iesteps: number of internal energy divisions
    :param irsteps: number of density divisions

    The file produced is intended for later use by the LUT gas model.
    """
    # Create the gas model objects
    fluidModel = create_gas_file("real gas REFPROP", [fluidName, "two phase"])
    myFluid = Gas_data(fluidModel)
    # Keep density range on a logarithmic scale.
    dlr = (log_rho_max - log_rho_min) / irsteps
    log_rho_values = numpy.linspace(log_rho_min, log_rho_max, irsteps+1)
    # Internal energy range on a linear scale.
    e_min, e_max = get_e_range(myFluid, fluidModel, T_min, T_max, log_rho_values)
    print "e_min=", e_min, "e_max=", e_max
    de = (e_max - e_min) / iesteps
    e_values = numpy.linspace(e_min, e_max, iesteps+1)
    #
    fname = 'REFPROP-lut-' + fluidName + '.lua.gz'
    print "Writing out look-up table: %s" % fname
    fp = gzip.open(fname, 'wb')
    fp.write("-- Auto-generated by build-REFPROP-lut.py on: %s\n" % time.asctime())
    fp.write("model = 'look-up table'\n")
    fp.write("iesteps = %d\n" % iesteps)
    fp.write("irsteps = %d\n" % irsteps)
    # It is nice to have e = Cv * T in the table.
    fp.write("emin = %g\n" % (e_min))
    fp.write("de = %g\n" % de)
    fp.write("lrmin = %g\n" % log_rho_min)
    fp.write("dlr = %g\n" % dlr)
    # Now, write the table data.
    fp.write("data = {\n")
    for e in e_values:
        print '*',
        sys.stdout.flush()
        fp.write("{\n")
        for log_rho in log_rho_values:
            rho = math.pow(10.0, log_rho)
            myFluid.rho = rho
            myFluid.e[0] = e
            fluidModel.eval_thermo_state_rhoe(myFluid)
            fluidModel.eval_transport_coefficients(myFluid)
            Cv_hat = (e) / myFluid.T[0]
            Cv_actual = fluidModel.Cv(myFluid)
            R_hat = myFluid.p / (rho * myFluid.T[0])
            gamma_hat = myFluid.a * myFluid.a / (R_hat * myFluid.T[0])
            fp.write("{%g, %g, %g, %g, %g, %g},\n" %
                     (Cv_hat, Cv_actual, R_hat, gamma_hat, myFluid.mu, myFluid.k[0]))
        fp.write("},\n")
    fp.write("}\n\n")
    fp.close()
    print
    return

def list_fluids(option, opt, value, parser):
    print "Available pure fluids and pseudo pure fluids are:"
    print os.listdir(os.path.expandvars("$HOME/e3bin") + "/species/refprop/fluids/")
    print "Available predefined mixtures are:"
    print os.listdir(os.path.expandvars("$HOME/e3bin") + "/species/refprop/mixtures/")
    sys.exit()

if __name__ == '__main__':
    from optparse import OptionParser, OptionGroup
    usage = "Usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-f", "--fluid", action="store", type="string", dest="fluidName",
                      help="name of REFPROP fluid, pseudo pure fluid or mixture")
    parser.add_option("-l", "--list-fluids", action="callback", callback=list_fluids,
                      help="list available fluids and exit")
    parser.add_option("-b", "--bounds", action="store", type="string", dest="bounds",
                      default="300.0,450.0,-1.0,2.0",
                      help="bounds of the table in form \"T_min,T_max,log_rho_min,log_rho_max\"")
    parser.add_option("-d", "--divisions", action="store", type="string", dest="divisions",
                      default="400,50",
                      help="number of density and internal energy divisions, of the form \"num_energy,num_density\"")
    (options, args) = parser.parse_args()
    if options.fluidName == None:
        parser.print_help()
        print ""
        print "Example 1 -         pure fluid: build-REFPROP-lut.py --fluid=R134A.FLD"
        print "Example 2 - predefined mixture: build-REFPROP-lut.py --fluid=AIR.MIX"
        print "Example 3 -  pseudo pure fluid: build-REFPROP-lut.py --fluid=AIR.PPF"
        sys.exit()
    T_min, T_max, log_rho_min, log_rho_max = [float(item) for item in options.bounds.split(',')]
    iesteps, irsteps = [float(item) for item in options.divisions.split(',')]
    print "Building table for fluid name: ", options.fluidName
    print "    log_rho_min=", log_rho_min, "log_rho_max=", log_rho_max
    print "    T_min=", T_min, "T_max=", T_max
    build_table(options.fluidName, T_min, T_max, log_rho_min, log_rho_max, iesteps, irsteps)
    print "Done."
