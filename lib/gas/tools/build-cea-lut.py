#! /usr/bin/env python
"""
build-cea-lut.py

Build look-up-table for the behaviour of a gas in thermochemical equilibrium.
All of the difficult computation is done by the NASA CEA2 program.
We just collate the results in a form convenient for the gas module of Eilmer3. 

.. Authors: PJ and RJG
.. Version: 06-April-2012: Fresh start, building on cea2_gas module.
"""

import sys, os, time, numpy, math, gzip
sys.path.append(os.path.expandvars("$HOME/e3bin"))
from cfpylib.gasdyn.cea2_gas import make_gas_from_name, Gas

#-----------------------------------------------------------------------------

def get_e_offset(mygas):
    """
    At a suitably-low value of temperature, compute the energy offset for CEA gas.
    
    :param mygas: cea2 Gas object
    :returns: offset value to be added to CEA internal energy.
    
    It is convenient to have the reference temperature of 0 degrees K
    for internal energy and enthalpy, so that e = C_v * T, approximately.
    This is quite different to the reference temperature of 298 degrees K
    used by CEA, so we'll compute an offset value and shift the CEA value
    of internal energy by this offset in future.
    """ 
    T = 302.0 # Any low temperature will suffice. 
    mygas.set_pT(100.0e3, T)
    # mygas.write_state(sys.stdout)
    return  mygas.C_v * T - mygas.e

def get_e_range(mygas, T_min, T_max, log_rho_values):
    """
    Scan the boundary of the temperature and density to determine 
    the range of internal that can be comfortably computed by CEA.
    """
    e_values = []
    for log_rho in log_rho_values:
        mygas.set_rhoT(math.pow(10.0,log_rho), T_min)
        e_values.append(mygas.e)
    e_min = max(e_values)
    e_values = []
    for log_rho in log_rho_values:
        mygas.set_rhoT(math.pow(10.0,log_rho), T_max)
        e_values.append(mygas.e)
    e_max = min(e_values)
    return e_min, e_max

def build_table(gasName):
    """
    Compute gas thermo properties for a mesh of internal-energy and density values
    and write an encoded form of the thermo data to a Lua-format file.

    This file is later read and the data used by the LUT gas model.
    """
    mygas = make_gas_from_name(gasName)
    #
    e_offset = get_e_offset(mygas)
    print "e_offset=", e_offset
    #
    # Density range on a logarithmic scale.
    log_rho_min, log_rho_max = -6.0, 2.0
    irsteps = 50
    dlr = (log_rho_max - log_rho_min) / irsteps
    log_rho_values = numpy.linspace(log_rho_min, log_rho_max, irsteps+1)
    # print "log_rho_values=", log_rho_values
    #
    # Internal energy range on a linear scale.
    T_min, T_max = 200.0, 20000.0
    e_min, e_max = get_e_range(mygas, T_min, T_max, log_rho_values)
    print "e_min=", e_min, "e_max=", e_max
    iesteps = 400
    de = (e_max - e_min) / iesteps
    e_values = numpy.linspace(e_min, e_max, iesteps+1)
    #
    fname = 'cea-lut-' + gasName + '.lua.gz'
    print "Writing out look-up table: %s" % fname
    fp = gzip.open(fname, 'wb')
    fp.write("-- Auto-generated by build-cea-lut.py on: %s\n" % time.asctime())
    fp.write("model = 'look-up table'\n")
    fp.write("iesteps = %d\n" % iesteps)
    fp.write("irsteps = %d\n" % irsteps)
    # It is nice to have e = Cv * T in the table.
    fp.write("emin = %g\n" % (e_min+e_offset))
    fp.write("de = %g\n" % de)
    fp.write("lrmin = %g\n" % log_rho_min)
    fp.write("dlr = %g\n" % dlr)
    # Now, write the table data.
    fp.write("data = {\n")
    for e in e_values:
        print '*',
        sys.stdout.flush()
        fp.write("{\n")
        for log_rho in log_rho_values:
            rho = math.pow(10.0, log_rho)
            mygas.set_rhoe(rho, e)
            Cv_hat = (e + e_offset) / mygas.T
            R_hat = mygas.p / (rho * mygas.T)
            gamma_hat = mygas.a * mygas.a / (R_hat * mygas.T)
            fp.write("{%g, %g, %g, %g, %g, %g},\n" %
                     (Cv_hat, mygas.C_v, R_hat, gamma_hat, mygas.mu, mygas.k))
        fp.write("},\n")
    fp.write("}\n\n")
    fp.close()
    print
    return

#-----------------------------------------------------------------------------
def list_gases(option, opt, value, parser):
    print "Available gases are:"
    print "   air"
    print "   air5species"
    print "   N2"
    print "   CO2"
    print "   H2Ne"
    print ""
    import sys
    sys.exit()
    

if __name__ == '__main__':
    print "Begin build-cea-lut.py..."
    from optparse import OptionParser
    usage = "Usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-g", "--gas", action="store",
                      type="string", dest="gasName",
                      help="name of built-in gas mixture")
    parser.add_option("-l", "--list-gases", action="callback",
                      callback=list_gases,
                      help="list available gas names and exit")
    (options, args) = parser.parse_args()
    if options.gasName == None:
       parser.print_help()
       import sys
       sys.exit()
    print "Building table for gas name: ", options.gasName
    build_table(options.gasName)
    print "Done."
