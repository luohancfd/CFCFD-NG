-- Author: Peter Blyton
-- Adapted from Rowan's ideal_gas.lua
-- Date: 18-Apr-2012

module(..., package.seeall)

function serialise(o, f, indent)
   indent = indent or ""
   if type(o) == "number" then
      f:write(o)
   elseif type(o) == "string" then
      f:write(string.format("%q", o))
   elseif type(o) == "table" then
      local old_indent = indent
      indent = indent.."  "
      f:write("{\n")
      for k,v in pairs(o) do
         if type(k) == "string" then
            f:write(string.format("%s%s = ", indent, k))
         else
            f:write(string.format("%s", indent))
         end
         serialise(v, f, indent)
         f:write(",\n")
      end
      indent = old_indent
      f:write(string.format("%s}", indent))
   else
      error("cannot serialise a " .. type(o))
   end
end

function list_available_species()
   e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
   dir = e3bin.."/species"
   tmpname = os.tmpname()
   str1 = string.format("find %s -name '*.lua' ", dir)
   str2 = "| xargs grep -l 'rho_c' "
   str3 = "| xargs grep -l 'reference_state' "
   str4 = "| xargs grep -l 'MBWR_EOS_coeffs' "
   str5 = "| xargs grep -l 'Cp0_coeffs' "
   str6 = string.format("> %s", tmpname)
   os.execute(str1 .. str2 .. str3 ..  str4 .. str5 .. str6)
   tmpfile = assert(io.open(tmpname, "r"))
   species = {}
   for line in tmpfile:lines() do
      sp = string.match(line, "([%a%d_]+).lua")
      species[sp] = true
   end
   tmpfile:close()
   os.execute(string.format("rm %s", tmpname))
   return species
end


local value_list = {"M",
                    "rho_c",
                    "reference_state",
                    "MBWR_EOS_coeffs",
                    "Cp0_coeffs"}

local model_list = {"viscosity",
                    "thermal_conductivity"}

function create_real_gas_MBWR(species, f)
   species_avail = list_available_species()
   
   f:write(string.format("-- Auto-generated by gasfile on: %s\n",
                         os.date("%d-%b-%Y %X")))
   f:write("model = 'composite gas'\n")
   f:write("equation_of_state = 'MBWR'\n")
   f:write("thermal_behaviour = 'dense thermally real'\n")
   f:write("mixing_rule = 'Wilke'\n")
   f:write("sound_speed = 'equilibrium'\n")
   f:write("ignore_mole_fraction = 1.0e-15\n")

   f:write("species = {")
   for _,sp in ipairs(species) do
      if not species_avail[sp] then
         print(string.format("Species: %s is not implemented for this gas model.\n", sp))
         print("Check for an appropriate file in:\n")
	 e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
	 dir = e3bin.."/species"
         print("   ", dir, "\n")
         print("This model requires:\n")
         for __,value in ipairs(value_list) do
            print("   ", value)
         end
         print("\ntables from the selected species file.\n")
         print("Bailing out!\n")
         os.exit(1)
      end
      f:write(string.format("'%s', ", sp))
   end
   f:write("}\n")
   f:write("\n")
   
   e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
   dir = e3bin.."/species"
   default_file = dir.."/defaults.lua"
   dofile(default_file)

   for _,sp in ipairs(species) do
      e3bin = os.getenv("E3BIN") or os.getenv("HOME").."/e3bin"
      dir = e3bin.."/species/"
      file = dir..sp..".lua"
      dofile(file)
      
      f:write(string.format("%s = {}\n", sp))

      for __,val in ipairs(value_list) do
         var = sp.."."..val
         f:write(string.format("%s = ", var))
         if _G[sp][val] then
            serialise(_G[sp][val], f)
         else
            serialise(default[val], f)
         end
         f:write("\n")
      end

      for __,model in ipairs(model_list) do
         var = sp.."."..model
         f:write(string.format("%s = ", var))
         if _G[sp][model] then
            serialise(_G[sp][model], f)
         else
            serialise(default[model], f)
         end
         f:write("\n")
      end
   end
end
